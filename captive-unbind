#!/bin/sh
set -e
iface="$1"
UNBOUND_CONFIG="/usr/local/etc/unbound/unbound.conf"

fin(){
  code="$?"

  [ "$code" -eq 2 ] && exit 1 # exit code 2 means we have no ipfw rules to delete

  [ "$code" -eq 1 ] && echo "Restarting ipfw." && service ipfw restart >/dev/null && exit 1 # means something went wrong with drill/curl

  printf "Finished? (no: restart ipfw) (yes/no): "
  read -r response
  if [ "$(echo "$response" | cut -c1 | tr '[:upper:]' '[:lower:]')" == "y" ]; then
    if [ -n "$DNS_ADDRS" ]; then
      echo "Visit the captive portal(s):"
      printf "  http://captive.apple.com/\n"
      printf "  http://1.1.1.1/\n"
      echo "$DNS_ADDRS" | awk -F"=" '{print $2}' | sort | uniq | while IFS= read -r REDIRECT_ADDR; do
        printf "  http://%s/\n" "$REDIRECT_ADDR"
      done
    fi
  else
    echo "Restarting ipfw."
    service ipfw restart >/dev/null
    exit 1
  fi

  exit 0
}

fin_c() {
  printf "\n"
  exit 1
}

fin_cc() {
  printf "\n"
  exit 0
}

trap fin EXIT

[ "$(id -u)" != "0" ] && echo "This script must be run as root" >&2 && exit 2

[ -z "$iface" ] && echo "Usage: captive-unbound IFNAME" && exit 2
! [ -r "/var/db/dhclient.leases.$iface" ] && echo "No dhclient lease: $iface" && exit 2



FWD_ADDRS="$(awk 'BEGIN {
  inside_block = 0;
}

/^lease \{/ {
  inside_block = 1;
  final_block = "";
  next;
}

/^\}$/ {
  inside_block = 0;
  next;
}

inside_block {
  if ($0 ~ /^  option domain-name-servers /) {
    final_block = substr($0, length("  option domain-name-servers ")+1);
  }
}

END {
  if ( final_block != "" ) {
    gsub(/;$/, "", final_block);
    gsub(" ", "", final_block);
    split(final_block, lines, ",");
    for (i in lines) {
      if (lines[i] !~ /^192\.168\./ && lines[i] ~ /^([0-9]{1,3}\.){3}[0-9]{1,3}$/) {
        print lines[i];
      }
    }
  }
}' "/var/db/dhclient.leases.$iface")"


if [ -z "$FWD_ADDRS" ]; then
    echo "No DNS servers found from DHCP lease."
    printf "Specify proper DNS servers: "
    read -r FWD_ADDRS
else
    echo "Found the following DNS servers: "$FWD_ADDRS
    printf "Do these look like valid? (yes/no): "
    read -r response
    [ "$(echo "$response" | cut -c1 | tr '[:upper:]' '[:lower:]')" == "y" ] || read -p "Specify proper DNS servers: " FWD_ADDRS
fi

[ -z "$FWD_ADDRS" ] && exit 2

printf "\n-----------\n"
echo "$FWD_ADDRS" | tr ' ' '\n' | while IFS= read -r FWD_ADDR; do
  echo ipfw -q add 1 allow udp from any to "$FWD_ADDR" 53
  echo ipfw -q add 1 allow udp from "$FWD_ADDR" 53 to any
done
printf -- "-----------\n"

printf "Does this look reasonable to you? (yes/no/skip): "
read -r response
[ "$(echo "$response" | cut -c1 | tr '[:upper:]' '[:lower:]')" == "n" ] && exit 2

trap fin_c INT

echo "$FWD_ADDRS" | tr ' ' '\n' | while IFS= read -r FWD_ADDR; do
  ipfw -q add 1 allow udp from any to "$FWD_ADDR" 53
  ipfw -q add 1 allow udp from "$FWD_ADDR" 53 to any
done

printf "\n"

printf -- "-----------\n"

DNS_ADDRS="$(echo "$FWD_ADDRS" | tr ' ' '\n' | while IFS= read -r FWD_ADDR; do
  [ -z "$FWD_ADDR" ] && continue

  ADDRS="$(drill -Q @"$FWD_ADDR" captive.apple.com A 2>/dev/null || echo "Error on drill: $FWD_ADDR" >&2)"
  [ -z "$ADDRS" ] && continue

  echo "$ADDRS" | while IFS= read -r A_RECORD; do
    [ -z "$A_RECORD" ] && continue

    echo "$A_RECORD" | grep -q '\.$' && continue # ignore CNAME/flatenning

    printf "Checking %s from %s....\n" >&2 "$A_RECORD" "$FWD_ADDR"

    REDIRECT_ADDRS="$(curl -I -X GET -s -A 'Mozilla' -m 10 -H 'Host: captive.apple.com' -L -k http://"$A_RECORD"/ | awk '{ if (tolower($0) ~ /^location/) print $NF}')"

    echo "$REDIRECT_ADDRS" | while IFS= read -r REDIRECT_ADDR; do
      REDIRECT_ADDR="$(echo "$REDIRECT_ADDR" | sed -e 's/^\(.\{0,9\}\)\/\/\(.*\)/\2/'  -e 's|/.*||')"
      REDIRECT_ADDR="$(echo "$REDIRECT_ADDR" | awk -F'.' 'NF>1{print $(NF-1) "." $NF}')"
      REDIRECT_ADDR="$(echo "$REDIRECT_ADDR" | sed -e 's/[^A-Za-z0-9.-].*//')"
      [ -z "$REDIRECT_ADDR" ] && continue # did not redirect, maybe we're being completely hijacked?

      # $FWD_ADDR is the resolver which is trying to hijack us, redirecting us to $REDIRECT_ADDR
      echo "$FWD_ADDR=$REDIRECT_ADDR"
      printf "\tcaptive.apple.com hijacked by %s with A record '%s' redirects to http://%s/.\n" "$FWD_ADDR" "$A_RECORD" "$REDIRECT_ADDR" >&2
    done
    printf "\n" >&2
  done
done)"

printf -- "-----------\n"

DNS_ADDRS="$(echo "$DNS_ADDRS" | sort | uniq)"

printf "\n"

if [ -z "$DNS_ADDRS" ]; then
  echo "Could not discover any captive portals for forward-zone. Maybe there's a meta-redirect?"

  printf "Do you want to curl to http://1.1.1.1/ (Screen will redraw on exit) (yes/no): "
  read -r response
  [ "$(echo "$response" | cut -c1 | tr '[:upper:]' '[:lower:]')" == "y" ] && curl -i -s -A 'Mozilla' -m 10 -L -k http://1.1.1.1/ | more --redraw-on-quit

  printf "Do you want to add your own captive portal address? (FWD_ADDRS=%s) (yes/no): " $FWD_ADDRS
  read -r response
  [ "$(echo "$response" | cut -c1 | tr '[:upper:]' '[:lower:]')" == "y" ] || exit 1

  printf "Specify the DNS Server and the captive portal in the form of DNS_ADDR=CAPTIVE_PORTAL_DOMAIN: "
  read -r response

  [ -z "$response" ] && exit 1

  DNS_ADDRS="$response"

  while true; do
    printf "Add another? (yes/no): "
    read -r response

    [ "$(echo "$response" | cut -c1 | tr '[:upper:]' '[:lower:]')" == "y" ] || break

    printf "Specify the DNS Server and the captive portal in the form of DNS_ADDR=CAPTIVE_PORTAL_DOMAIN: "
    read -r response

    [ -z "$response" ] && break

    DNS_ADDRS="$(printf "%s\n%s" "$DNS_ADDRS" "$response")"
  done
fi

DUPES="$(echo "$DNS_ADDRS" | awk -F"=" '{print $2}' | sort | uniq | while IFS= read -r REDIRECT_ADDR; do
  if grep -q "$REDIRECT_ADDR" "$UNBOUND_CONFIG"; then
    echo "$REDIRECT_ADDR"
  fi
done)"

if [ -n "$DUPES" ]; then
  echo "$DUPES" | sort | uniq | while IFS= read -r DUPE; do
    echo "Captive portal $DUPE already exists in $UNBOUND_CONFIG"
  done

  exit 0
fi

printf -- "-----------\n"
UNBOUND_BLOCK="$(echo "$DNS_ADDRS" | awk '
{
  split($0, a, "=");
  ip = a[1];
  domain = a[2];

  if (!(domain in ips)) {
    ips[domain] = "";
  }
  ips[domain] = ips[domain] ip "\n";
}

END {
  for (domain in ips) {
    print "forward-zone:"
    print "\tname: \"" domain "\""

    split(ips[domain], addr_list, "\n")
    for (i in addr_list) {
      if (addr_list[i] != "") {
        print "\tforward-addr: " addr_list[i]
      }
    }
    print "\tforward-tls-upstream: no\n"
  }
}')"
echo "$UNBOUND_BLOCK"
printf -- "-----------\n"

printf "Do you want to add this to unbound.conf? (yes/no): "
read -r response
[ "$(echo "$response" | cut -c1 | tr '[:upper:]' '[:lower:]')" == "y" ] && echo "$UNBOUND_BLOCK" >> "$UNBOUND_CONFIG" && printf "\n" >> "$UNBOUND_CONFIG" && printf -- "\n-----------\n" && { service unbound stop ; sleep 1 ; service unbound start ; printf -- "-----------\n\n"; }

trap fin_cc INT

printf "Do you want to curl each website to check for more domains? (Screen will redraw on exit) (yes/no): "
read -r response

if [ "$(echo "$response" | cut -c1 | tr '[:upper:]' '[:lower:]')" == "y" ]; then
  echo "$DNS_ADDRS" | awk -F"=" '{print $2}' | sort | uniq | while IFS= read -r REDIRECT_ADDR; do
    curl -s -A 'Mozilla' -m 10 -L -k -H 'Host: captive.apple.com' http://"$REDIRECT_ADDR"/ | more --redraw-on-quit
  done
fi

printf "\n"

printf "Specify any remaining domains you would like to add: "
read -r response

[ -z "$response" ] && exit 0

ADDED_DOMAINS="$response"


UNBOUND_BLOCK="$(for REDIRECT_ADDR in $ADDED_DOMAINS; do
  printf "forward-zone:\n"
  printf "\tname: \"%s\"\n" "$REDIRECT_ADDR"
  echo "$DNS_ADDRS" | awk -F"=" '{print $1}' | sort | uniq | while IFS= read -r DNS_ADDR; do
    printf "\tforward-addr: %s\n" "$DNS_ADDR"
  done
  printf "\tforward-tls-upstream: no\n\n"
done)"

printf "\n-----------\n"
echo "$UNBOUND_BLOCK"
printf -- "-----------\n"

printf "Do you want to add this to unbound.conf? (yes/no): "
read -r response

if [ "$(echo "$response" | cut -c1 | tr '[:upper:]' '[:lower:]')" == "y" ]; then
  echo "$UNBOUND_BLOCK" >> "$UNBOUND_CONFIG"
  printf "\n" >> "$UNBOUND_CONFIG"
  printf -- "\n-----------\n"
  service unbound stop
  sleep 1
  service unbound start
  printf -- "-----------\n\n"
  for REDIRECT_ADDR in $ADDED_DOMAINS; do
    DNS_ADDRS="$(printf "%s\nplace_holder=%s" "$DNS_ADDRS" "$REDIRECT_ADDR")"
  done
fi

exit 0
